# задачи из hw02_easy.py

# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.

# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2.  банан
# 3.   киви
# 4.  арбуз

# Подсказка: воспользоваться методом .format()

fruits = ["яблоко", "банан", "киви", "арбуз"]
for idx, fruit in enumerate(fruits):
    print('{:<10} {:>10}'.format(idx, fruit))

# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.

import random
# генерирую 2 массива
array_1 = [random.randint(1, 10) for i in range(10)]
array_2 = [random.randint(1, 10) for i in range(10)]
print(array_1, '\n', array_2)

# сорри, быстро не придумал, как переписать первый список, пожтому через спам переменную
array_temp = []
for i in array_1:
    if i not in array_2:
        array_temp.append(i)
array_1 = array_temp
print(array_1)

# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.

# генерирую исходный массив
import random
array = [random.randint(1, 10) for i in range(10)]
print(f'исходный список {array}')
# формирую новый список по правилам
new_array = []
for i in array:
    if i % 2 == 0:
        i = i / 4
        new_array.append(i)
    else:
        i = i * 2
        new_array.append(i)
print(f'новый список {new_array}')

# задачи из hw02_normal.py

# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

array =  [2, -5, 8, 9, -25, 25, 4]
new_array = []
for i in array:
    if i > 0 and (i ** 0.5) % 1 == 0:
        new_array.append(int(i ** 0.5))
print(new_array)

# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

days = {'01': 'первое', '02': 'второе', '03': 'третье','04': 'четвертое', '05': 'пятое', '06': 'шестое', '07': 'седьмое',
        '08': 'восьмое', '09': 'девятое', '10': 'десятое', '11': 'одиннадцатое', '12': 'двенадцатое',
        '13': 'птринадцатое', '14': 'четырнадцатое', '15': 'пятнадцатое', '16': 'шестнадцатое', '17': 'семнадцатое',
        '18': 'восемнадцатое', '19': 'девятнадцатое', '20': 'двадцатое', '21': 'двадцать первое',
        '22': 'двадцать второе', '23': 'двадцать третье', '24': 'двадцать четвертое','25': 'двадцать пятое',
        '26': 'двадцать шестое', '27': 'двадцать седьмое', '28': 'двадцать восьмое', '29': 'двадцать девятое',
        '30': 'тридцатое', '31': 'тридцать первое'}

months = {'01': 'января', '02': 'февраля', '03': 'марта', '04': 'апреля', '05': 'мая', '06': 'июня', '07': 'июля',
        '08': 'августа', '09': 'сентября', '10': 'октября', '11': 'ноября', '12': 'декабря'}

dt = '09.02.2013'
dt = dt.split('.')
print(days[dt[0]], months[dt[1]], dt[2], 'года')


# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random

import random

n = int(input('Введите длину случайно генерируемого массива: '))
print([random.randint(-100, 100) for i in range(n)])

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут:
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

lst = [1, 2, 4, 5, 6, 2, 5, 2]

lst_1 = list(set(lst))
print(f'неповторяющиеся элементы исходного списка: {lst_1}')
lst_2 = [x for x in lst if lst.count(x)<2]
print(f'элементы исходного списка, которые не имеют повторений: {lst_2}')

# задачи из hw02_hard.py

# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.

equation = 'y = -12x + 11111140.2121'
x = 2.5
# вычислите и выведите y

# парсю строку на элементы
parsed = equation.split(' ')
# очевидно, проблема с частью формулы (+/-)ax, т.к. отсутствие знака дейтсвия не дает применить eval():
# поэтому будем работать через regular expressions
import re
# создаю функцию, которая парсит 2ой элемент формулы на число и переменную и перемножает их
def ax(parsed_element):
    multi = re.split('(\d+)', parsed_element)
    # обращаю в число slope
    multi[1] = float(multi[1])
    # спарсенной переменной присваиваю заданное ей значение
    multi[2] = float(x)
    # учитываю возможный минус
    if multi[0] == '-':
        multi[1] = -1 * multi[1]
    sd = multi[1] * multi[2]
    return sd

# прибавляю intercept с учетом знака
if parsed[3] == '+':
    result = ax(parsed[2]) + float(parsed[4])
    print(result)
if parsed[3] == '-':
    result = ax(parsed[2]) - float(parsed[4])
    print(result)

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
date = '01.11.1985'

# Примеры некорректных дат
# date = '01.22.1001'
# date = '1.12.1001'
# date = '-2.10.3001'

import sys

try:
    dt1, dt2, dt3 = date.split('.')
# проверка на целочисленность года
except ValueError:
    sys.exit('не соблюден формат даты дд.мм.гггг')

# проверка на формат и неотрицателность составляющих
if len(dt1) == 2 and len(dt2) == 2 and len(dt3) == 4:
    print('формат соблюден')
else:
    sys.exit('не соблюден формат даты дд.мм.гггг')

# проверка диапозона значений года
if int(dt3) in range(1,9999):
    print('год введен корректно')
else:
    sys.exit('введите год в корректном формате (целое число в диапазоне от 1 до 9999)')

# проверка диапозона значений месяца
if int(dt2) in range(1,13):
    print('месяц введен корректно')
else:
    sys.exit('введите месяц в корректном формате (целое число в диапазоне от 1 до 12)')

# проверка диапозона значений дня с учетом месяца
if int(dt2) in [2, 4, 6, 9, 11]:
    if int(dt1) in range(1, 31):
        print('день введен корректно')
    else:
        sys.exit('введите день в корректном формате (целое число в диапазоне от 1 до 30)')
if int(dt2) in [1, 3, 5, 7, 8, 10, 12]:
    if int(dt2) in range(1, 32):
        print('день введен корректно')
    else:
        sys.exit('введите день в корректном формате (целое число в диапазоне от 1 до 31)')

# как выкидывать сообщение об ошибке в самом низу вывода не успел подумать
# задачу 3 тоже не успел (

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3